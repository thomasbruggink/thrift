/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-05-29")
public class ChildAll( 
  private var innerVariable: Short = 0 // required
): org.apache.thrift.TBase<ChildAll, ChildAll._Fields>, java.io.Serializable, Cloneable, Comparable<ChildAll> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum class _Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    INNER_VARIABLE(1, "innerVariable");

    companion object {
      var byName: Map<String, _Fields> = mapOf(
        "innerVariable" to INNER_VARIABLE
      )
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Int): _Fields? {
        return when(fieldId) {
          1 -> // INNER_VARIABLE
            INNER_VARIABLE
          else ->
            null
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Int): _Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): _Fields? {
        return byName.get(name)
      }
    }
  }

  private var  __isset_bitfield: Byte = 0
  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: ChildAll) : this() {
    __isset_bitfield = other.__isset_bitfield;
    this.innerVariable = other.innerVariable
  }

  override fun deepCopy(): ChildAll{
    return ChildAll(this)
  }

  override fun clear() {
    setInnerVariableIsSet(false);
    this.innerVariable = 0;
  }

  fun getInnerVariable():Short {
    return this.innerVariable
  }

  fun setInnerVariable(innerVariable: Short): ChildAll {
    this.innerVariable = innerVariable
    setInnerVariableIsSet(true);
    return this
  }

  fun unsetInnerVariable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INNERVARIABLE_ISSET_ID);
  }

  /** Returns true if field innerVariable is set (has been assigned a value) and false otherwise */
  fun isSetInnerVariable(): Boolean {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INNERVARIABLE_ISSET_ID);
  }

  fun setInnerVariableIsSet(value: Boolean) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INNERVARIABLE_ISSET_ID, value);
  }

  override fun setFieldValue(field: _Fields,  value: Any?) {
    when (field) {
    _Fields.INNER_VARIABLE ->
      if (value == null) {
        unsetInnerVariable();
      } else {
        setInnerVariable(value as Short);
      }

    }
  }

  override fun getFieldValue(field: _Fields): Any? {
    return when(field) {
      _Fields.INNER_VARIABLE -> getInnerVariable()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: _Fields): Boolean {
    return when (field) {
      _Fields.INNER_VARIABLE->isSetInnerVariable()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is ChildAll)
        return this.equals(other)
    return false
  }

  fun equals(other: ChildAll?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_innerVariable: Boolean = true
    val other_present_innerVariable: Boolean = true
    if (this_present_innerVariable || other_present_innerVariable) {
      if (!(this_present_innerVariable && other_present_innerVariable))
        return false;
      if (this.innerVariable != other.innerVariable)
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + innerVariable

    return hashCode;
  }

  override fun compareTo(other: ChildAll):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetInnerVariable(), other.isSetInnerVariable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerVariable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerVariable, other.innerVariable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Int):_Fields? {
    return _Fields.findByThriftId(fieldId)
  }

  override fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<ChildAll>(iprot).read(iprot, this)
  }

  override fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<ChildAll>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("ChildAll(");
    var first:Boolean = true

    sb.append("innerVariable:");
    sb.append(this.innerVariable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      // it doesn't seem like you should have to do this, but kotlin serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class ChildAllStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<ChildAllStandardScheme> {
    override fun getScheme():ChildAllStandardScheme {
      return ChildAllStandardScheme()
    }
  }

  private class ChildAllStandardScheme : org.apache.thrift.scheme.StandardScheme<ChildAll>() {

    override fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:ChildAll) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // INNER_VARIABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.innerVariable = iprot.readI16();
              struct.setInnerVariableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:ChildAll) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      oprot.writeFieldBegin(INNER_VARIABLE_FIELD_DESC)
      oprot.writeI16(struct.innerVariable);
      oprot.writeFieldEnd()
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class ChildAllTupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<ChildAllTupleScheme> {
    override fun getScheme():ChildAllTupleScheme {
      return ChildAllTupleScheme()
    }
  }

  private class ChildAllTupleScheme : org.apache.thrift.scheme.TupleScheme<ChildAll>() {

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:ChildAll) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetInnerVariable()) {
        optionals.set(0)
      }
      prot.writeBitSet(optionals, 1)
      if (struct.isSetInnerVariable()) {
        oprot.writeI16(struct.innerVariable);
      }
    }

    override fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:ChildAll) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(1)
      if (incoming.get(0)) {
        struct.innerVariable = iprot.readI16();
        struct.setInnerVariableIsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("ChildAll");

    private val INNER_VARIABLE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("innerVariable", org.apache.thrift.protocol.TType.I16, 1.toShort());

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<ChildAllStandardScheme> = ChildAllStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<ChildAllTupleScheme> = ChildAllTupleSchemeFactory()
    // isset id assignments
    private val __INNERVARIABLE_ISSET_ID: Int = 0
    val metaDataMap: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.INNER_VARIABLE to org.apache.thrift.meta_data.FieldMetaData("innerVariable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChildAll::class.java, metaDataMap)
    }
    private fun <S : org.apache.thrift.TBase<*, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme is org.apache.thrift.scheme.StandardScheme<*>) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

