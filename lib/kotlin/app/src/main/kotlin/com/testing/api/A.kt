/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-06-26")
public class A( 
  private var p1: String?  = null, // required
  private var p2: String?  = null // required
): org.apache.thrift.TBase<A, A.Fields>, java.io.Serializable, Cloneable, Comparable<A> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  enum class Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    P1(1, "p1"),
    P2(2, "p2");

    companion object {
      var byName: Map<String, Fields> = mapOf(
        "p1" to P1,
        "p2" to P2
      )
      /**
       * Find the Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Short): Fields? {
        return when(fieldId) {
          1.toShort() -> // P1
            P1
          2.toShort() -> // P2
            P2
          else ->
            null
        }
      }

      /**
       * Find the Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Short): Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): Fields? {
        return byName.get(name)
      }
    }
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: A) : this() {
    if (other.isSetP1()) {
      this.p1 = other.p1
    }
    if (other.isSetP2()) {
      this.p2 = other.p2
    }
  }

  override fun deepCopy(): A{
    return A(this)
  }

  override fun clear() {
    this.p1 = null
    this.p2 = null
  }

  fun getP1():String? {
    return this.p1
  }

  fun setP1(p1: String?): A {
    this.p1 = p1
    return this
  }

  fun unsetP1() {
    this.p1 = null;
  }

  /** Returns true if field p1 is set (has been assigned a value) and false otherwise */
  fun isSetP1(): Boolean {
    return this.p1 != null;
  }

  fun setP1IsSet(value: Boolean) {
    if (!value) {
      this.p1 = null;
    }
  }

  fun getP2():String? {
    return this.p2
  }

  fun setP2(p2: String?): A {
    this.p2 = p2
    return this
  }

  fun unsetP2() {
    this.p2 = null;
  }

  /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
  fun isSetP2(): Boolean {
    return this.p2 != null;
  }

  fun setP2IsSet(value: Boolean) {
    if (!value) {
      this.p2 = null;
    }
  }

  override fun setFieldValue(field: Fields,  value: Any?) {
    when (field) {
    Fields.P1 ->
      if (value == null) {
        unsetP1()
      } else {
        setP1(value as String)
      }

    Fields.P2 ->
      if (value == null) {
        unsetP2()
      } else {
        setP2(value as String)
      }

    }
  }

  override fun getFieldValue(field: Fields): Any? {
    return when(field) {
      Fields.P1 -> getP1()
      Fields.P2 -> getP2()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: Fields): Boolean {
    return when (field) {
      Fields.P1->isSetP1()
      Fields.P2->isSetP2()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is A)
        return this.equals(other)
    return false
  }

  fun equals(other: A?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_p1: Boolean = true && this.isSetP1()
    val other_present_p1: Boolean = true && other.isSetP1()
    if (this_present_p1 || other_present_p1) {
      if (!(this_present_p1 && other_present_p1))
        return false;
      if (!this.p1!!.equals(other.p1))
        return false;
    }

    val this_present_p2: Boolean = true && this.isSetP2()
    val other_present_p2: Boolean = true && other.isSetP2()
    if (this_present_p2 || other_present_p2) {
      if (!(this_present_p2 && other_present_p2))
        return false;
      if (!this.p2!!.equals(other.p2))
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + (if(isSetP1()) 131071 else 524287)
    if (isSetP1())
      hashCode = hashCode * 8191 + p1.hashCode()

    hashCode = hashCode * 8191 + (if(isSetP2()) 131071 else 524287)
    if (isSetP2())
      hashCode = hashCode * 8191 + p2.hashCode()

    return hashCode;
  }

  override fun compareTo(other: A):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetP1(), other.isSetP1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p1, other.p1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetP2(), other.isSetP2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Short):Fields? {
    return Fields.findByThriftId(fieldId)
  }

  override fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<A>(iprot).read(iprot, this)
  }

  override fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<A>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("A(")
    var first:Boolean = true

    sb.append("p1:")
    if (this.p1 == null) {
      sb.append("null")
    } else {
      sb.append(this.p1)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("p2:")
    if (this.p2 == null) {
      sb.append("null")
    } else {
      sb.append(this.p2)
    }
    first = false
    sb.append(")");
    return sb.toString()
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class AStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<AStandardScheme> {
    override fun getScheme():AStandardScheme {
      return AStandardScheme()
    }
  }

  private class AStandardScheme : org.apache.thrift.scheme.StandardScheme<A>() {

    override fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:A) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // P1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p1 = iprot.readString()
              struct.setP1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          2 -> // P2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p2 = iprot.readString()
              struct.setP2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:A) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      if (struct.p1 != null) {
        oprot.writeFieldBegin(P1_FIELD_DESC)
        oprot.writeString(struct.p1)
        oprot.writeFieldEnd()
      }
      if (struct.p2 != null) {
        oprot.writeFieldBegin(P2_FIELD_DESC)
        oprot.writeString(struct.p2)
        oprot.writeFieldEnd()
      }
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class ATupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<ATupleScheme> {
    override fun getScheme():ATupleScheme {
      return ATupleScheme()
    }
  }

  private class ATupleScheme : org.apache.thrift.scheme.TupleScheme<A>() {

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:A) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetP1()) {
        optionals.set(0)
      }
      if (struct.isSetP2()) {
        optionals.set(1)
      }
      prot.writeBitSet(optionals, 2)
      if (struct.isSetP1()) {
        oprot.writeString(struct.p1)
      }
      if (struct.isSetP2()) {
        oprot.writeString(struct.p2)
      }
    }

    override fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:A) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(2)
      if (incoming.get(0)) {
        struct.p1 = iprot.readString()
        struct.setP1IsSet(true)
      }
      if (incoming.get(1)) {
        struct.p2 = iprot.readString()
        struct.setP2IsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("A");

    private val P1_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("p1", org.apache.thrift.protocol.TType.STRING, 1.toShort());
    private val P2_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.STRING, 2.toShort());

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<AStandardScheme> = AStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<ATupleScheme> = ATupleSchemeFactory()
    // isset id assignments
    private val metaDataMap: Map<Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      Fields.P1 to org.apache.thrift.meta_data.FieldMetaData("p1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      Fields.P2 to org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(A::class.java, metaDataMap)
    }
    private fun <S : org.apache.thrift.TBase<S, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme is org.apache.thrift.scheme.StandardScheme<*>) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

