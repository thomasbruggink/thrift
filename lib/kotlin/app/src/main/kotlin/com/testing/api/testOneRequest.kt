/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-07-11")
class testOneRequest( 
  private var name: String? = null // required
): org.apache.thrift.TBase<testOneRequest, testOneRequest.Fields>, java.io.Serializable, Cloneable, Comparable<testOneRequest> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  enum class Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    NAME(1, "name");

    companion object {
      var byName: Map<String, Fields> = mapOf(
        "name" to NAME
      )
      /**
       * Find the Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Short): Fields? {
        return when(fieldId) {
          (1).toShort() -> // NAME
            NAME
          else ->
            null
        }
      }

      /**
       * Find the Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Short): Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): Fields? {
        return byName.get(name)
      }
    }
  }

    private val metaDataMap: Map<Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      Fields.NAME to org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testOneRequest::class.java, metaDataMap)
    }
  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: testOneRequest) : this() {
    if (other.isSetName()) {
      this.name = other.name
    }
  }

  override fun deepCopy(): testOneRequest{
    return testOneRequest(this)
  }

  override fun clear() {
    this.name = null
  }

  fun getName():String? {
    return this.name
  }

  fun setName(name: String?): testOneRequest {
    this.name = name
    return this
  }

  fun unsetName() {
    this.name = null
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  fun isSetName(): Boolean {
    return this.name != null
  }

  fun setNameIsSet(value: Boolean) {
    if (!value) {
      this.name = null
    }
  }

  override fun setFieldValue(field: Fields,  value: Any?) {
      when (field) {
    Fields.NAME ->
      if (value == null) {
        unsetName()
      } else {
        setName(value as String)
      }

      }
  }

  override fun getFieldValue(field: Fields): Any? {
    return when(field) {
      Fields.NAME -> getName()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: Fields): Boolean {
    return when (field) {
      Fields.NAME->isSetName()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is testOneRequest)
        return this.equals(other)
    return false
  }

  fun equals(other: testOneRequest?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_name: Boolean = true && this.isSetName()
    val other_present_name: Boolean = true && other.isSetName()
    if (this_present_name || other_present_name) {
      if (!(this_present_name && other_present_name))
        return false;
      if (!this.name!!.equals(other.name))
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + (if(isSetName()) 131071 else 524287)
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode()

    return hashCode
  }

  override fun compareTo(other: testOneRequest):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Short):Fields? {
    return Fields.findByThriftId(fieldId)
  }

  override suspend fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<testOneRequest>(iprot).read(iprot, this)
  }

  override suspend fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<testOneRequest>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("testOneRequest(")
    var first:Boolean = true

    sb.append("name:")
    if (this.name == null) {
      sb.append("null")
    } else {
      sb.append(this.name)
    }
    first = false
    sb.append(")");
    return sb.toString()
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
  }

  suspend fun writeObject(out:java.nio.channels.AsynchronousByteChannel) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  suspend fun readObject(inp:java.nio.channels.AsynchronousByteChannel) {
    try {
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class testOneRequestStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<testOneRequestStandardScheme> {
    override fun getScheme():testOneRequestStandardScheme {
      return testOneRequestStandardScheme()
    }
  }

  private class testOneRequestStandardScheme : org.apache.thrift.scheme.StandardScheme<testOneRequest>() {

    override suspend fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:testOneRequest) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString()
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override suspend fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:testOneRequest) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC)
        oprot.writeString(struct.name)
        oprot.writeFieldEnd()
      }
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class testOneRequestTupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<testOneRequestTupleScheme> {
    override fun getScheme():testOneRequestTupleScheme {
      return testOneRequestTupleScheme()
    }
  }

  private class testOneRequestTupleScheme : org.apache.thrift.scheme.TupleScheme<testOneRequest>() {

    override suspend fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:testOneRequest) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetName()) {
        optionals.set(0)
      }
      prot.writeBitSet(optionals, 1)
      if (struct.isSetName()) {
        oprot.writeString(struct.name)
      }
    }

    override suspend fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:testOneRequest) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(1)
      if (incoming.get(0)) {
        struct.name = iprot.readString()
        struct.setNameIsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("testOneRequest");

    private val NAME_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, 1)

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<testOneRequestStandardScheme> = testOneRequestStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<testOneRequestTupleScheme> = testOneRequestTupleSchemeFactory()
    // isset id assignments
    private fun <S : org.apache.thrift.TBase<S, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme.isAssignableFrom(org.apache.thrift.scheme.StandardScheme::class.java)) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

