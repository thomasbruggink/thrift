/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-05-29")
public class HelloAll( 
  private var variable1: String?  = null, // required
  private var variable2: Int = 0 // required
): org.apache.thrift.TBase<HelloAll, HelloAll._Fields>, java.io.Serializable, Cloneable, Comparable<HelloAll> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum class _Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    VARIABLE1(1, "Variable1"),
    VARIABLE2(2, "Variable2");

    companion object {
      var byName: Map<String, _Fields> = mapOf(
        "Variable1" to VARIABLE1,
        "Variable2" to VARIABLE2
      )
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Int): _Fields? {
        return when(fieldId) {
          1 -> // VARIABLE1
            VARIABLE1
          2 -> // VARIABLE2
            VARIABLE2
          else ->
            null
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Int): _Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): _Fields? {
        return byName.get(name)
      }
    }
  }

  private var  __isset_bitfield: Byte = 0
  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: HelloAll) : this() {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVariable1()) {
      this.variable1 = other.variable1;
    }
    this.variable2 = other.variable2;
  }

  override fun deepCopy(): HelloAll{
    return HelloAll(this)
  }

  override fun clear() {
    this.variable1 = null;
    setVariable2IsSet(false);
    this.variable2 = 0;
  }

  fun getVariable1():String? {
    return this.variable1
  }

  fun setVariable1(variable1: String?): HelloAll {
    this.variable1 = variable1
    return this
  }

  fun unsetVariable1() {
    this.variable1 = null;
  }

  /** Returns true if field variable1 is set (has been assigned a value) and false otherwise */
  fun isSetVariable1(): Boolean {
    return this.variable1 != null;
  }

  fun setVariable1IsSet(value: Boolean) {
    if (!value) {
      this.variable1 = null;
    }
  }

  fun getVariable2():Int {
    return this.variable2
  }

  fun setVariable2(variable2: Int): HelloAll {
    this.variable2 = variable2
    setVariable2IsSet(true);
    return this
  }

  fun unsetVariable2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VARIABLE2_ISSET_ID);
  }

  /** Returns true if field variable2 is set (has been assigned a value) and false otherwise */
  fun isSetVariable2(): Boolean {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VARIABLE2_ISSET_ID);
  }

  fun setVariable2IsSet(value: Boolean) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VARIABLE2_ISSET_ID, value);
  }

  override fun setFieldValue(field: _Fields,  value: Any?) {
    when (field) {
    _Fields.VARIABLE1 ->
      if (value == null) {
        unsetVariable1();
      } else {
        setVariable1(value as String);
      }

    _Fields.VARIABLE2 ->
      if (value == null) {
        unsetVariable2();
      } else {
        setVariable2(value as Int);
      }

    }
  }

  override fun getFieldValue(field: _Fields): Any? {
    return when(field) {
      _Fields.VARIABLE1 -> getVariable1()
      _Fields.VARIABLE2 -> getVariable2()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: _Fields): Boolean {
    return when (field) {
      _Fields.VARIABLE1->isSetVariable1()
      _Fields.VARIABLE2->isSetVariable2()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is HelloAll)
        return this.equals(other)
    return false
  }

  fun equals(other: HelloAll?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_variable1: Boolean = true && this.isSetVariable1()
    val other_present_variable1: Boolean = true && other.isSetVariable1()
    if (this_present_variable1 || other_present_variable1) {
      if (!(this_present_variable1 && other_present_variable1))
        return false;
      if (!this.variable1.equals(other.variable1))
        return false;
    }

    val this_present_variable2: Boolean = true
    val other_present_variable2: Boolean = true
    if (this_present_variable2 || other_present_variable2) {
      if (!(this_present_variable2 && other_present_variable2))
        return false;
      if (this.variable2 != other.variable2)
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + (if(isSetVariable1()) 131071 else 524287)
    if (isSetVariable1())
      hashCode = hashCode * 8191 + variable1.hashCode()

    hashCode = hashCode * 8191 + variable2

    return hashCode;
  }

  override fun compareTo(other: HelloAll):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetVariable1(), other.isSetVariable1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable1, other.variable1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVariable2(), other.isSetVariable2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable2, other.variable2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Int):_Fields? {
    return _Fields.findByThriftId(fieldId)
  }

  override fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<HelloAll>(iprot).read(iprot, this)
  }

  override fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<HelloAll>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("HelloAll(");
    var first:Boolean = true

    sb.append("variable1:");
    if (this.variable1 == null) {
      sb.append("null");
    } else {
      sb.append(this.variable1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("variable2:");
    sb.append(this.variable2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      // it doesn't seem like you should have to do this, but kotlin serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class HelloAllStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<HelloAllStandardScheme> {
    override fun getScheme():HelloAllStandardScheme {
      return HelloAllStandardScheme()
    }
  }

  private class HelloAllStandardScheme : org.apache.thrift.scheme.StandardScheme<HelloAll>() {

    override fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // VARIABLE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.variable1 = iprot.readString();
              struct.setVariable1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          2 -> // VARIABLE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.variable2 = iprot.readI32();
              struct.setVariable2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      if (struct.variable1 != null) {
        oprot.writeFieldBegin(VARIABLE1_FIELD_DESC)
        oprot.writeString(struct.variable1);
        oprot.writeFieldEnd()
      }
      oprot.writeFieldBegin(VARIABLE2_FIELD_DESC)
      oprot.writeI32(struct.variable2);
      oprot.writeFieldEnd()
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class HelloAllTupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<HelloAllTupleScheme> {
    override fun getScheme():HelloAllTupleScheme {
      return HelloAllTupleScheme()
    }
  }

  private class HelloAllTupleScheme : org.apache.thrift.scheme.TupleScheme<HelloAll>() {

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetVariable1()) {
        optionals.set(0)
      }
      if (struct.isSetVariable2()) {
        optionals.set(1)
      }
      prot.writeBitSet(optionals, 2)
      if (struct.isSetVariable1()) {
        oprot.writeString(struct.variable1);
      }
      if (struct.isSetVariable2()) {
        oprot.writeI32(struct.variable2);
      }
    }

    override fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(2)
      if (incoming.get(0)) {
        struct.variable1 = iprot.readString();
        struct.setVariable1IsSet(true)
      }
      if (incoming.get(1)) {
        struct.variable2 = iprot.readI32();
        struct.setVariable2IsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("HelloAll");

    private val VARIABLE1_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("Variable1", org.apache.thrift.protocol.TType.STRING, 1.toShort());
    private val VARIABLE2_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("Variable2", org.apache.thrift.protocol.TType.I32, 2.toShort());

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<HelloAllStandardScheme> = HelloAllStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<HelloAllTupleScheme> = HelloAllTupleSchemeFactory()
    // isset id assignments
    private val __VARIABLE2_ISSET_ID: Int = 0
    val metaDataMap: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.VARIABLE1 to org.apache.thrift.meta_data.FieldMetaData("Variable1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      _Fields.VARIABLE2 to org.apache.thrift.meta_data.FieldMetaData("Variable2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloAll::class.java, metaDataMap)
    }
    private fun <S : org.apache.thrift.TBase<*, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme is org.apache.thrift.scheme.StandardScheme<*>) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

