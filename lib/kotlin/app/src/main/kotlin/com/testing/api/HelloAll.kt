/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-06-02")
public class HelloAll( 
  private var Variable1: String?  = null, // required
  private var Variable2: Int = 0, // required
  private var Variable3: Long = 0, // required
  private var ChildNode: ChildAll?  = ChildAll(), // required
  private var listString: ArrayList<String>?  = ArrayList<String>(), // required
  private var mapStringString: HashMap<String,String>?  = HashMap<String,String>(), // required
  private var setString: HashSet<String>?  = HashSet<String>(), // required
  private var binData: java.nio.ByteBuffer?  = null // required
): org.apache.thrift.TBase<HelloAll, HelloAll._Fields>, java.io.Serializable, Cloneable, Comparable<HelloAll> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum class _Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    VARIABLE1(1, "Variable1"),
    VARIABLE2(2, "Variable2"),
    VARIABLE3(3, "Variable3"),
    CHILD_NODE(4, "ChildNode"),
    LIST_STRING(5, "listString"),
    MAP_STRING_STRING(6, "mapStringString"),
    SET_STRING(7, "setString"),
    BIN_DATA(8, "binData");

    companion object {
      var byName: Map<String, _Fields> = mapOf(
        "Variable1" to VARIABLE1,
        "Variable2" to VARIABLE2,
        "Variable3" to VARIABLE3,
        "ChildNode" to CHILD_NODE,
        "listString" to LIST_STRING,
        "mapStringString" to MAP_STRING_STRING,
        "setString" to SET_STRING,
        "binData" to BIN_DATA
      )
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Int): _Fields? {
        return when(fieldId) {
          1 -> // VARIABLE1
            VARIABLE1
          2 -> // VARIABLE2
            VARIABLE2
          3 -> // VARIABLE3
            VARIABLE3
          4 -> // CHILD_NODE
            CHILD_NODE
          5 -> // LIST_STRING
            LIST_STRING
          6 -> // MAP_STRING_STRING
            MAP_STRING_STRING
          7 -> // SET_STRING
            SET_STRING
          8 -> // BIN_DATA
            BIN_DATA
          else ->
            null
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Int): _Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): _Fields? {
        return byName.get(name)
      }
    }
  }

  private var  __isset_bitfield: Byte = 0
  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: HelloAll) : this() {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVariable1()) {
      this.Variable1 = other.Variable1
    }
    this.Variable2 = other.Variable2
    this.Variable3 = other.Variable3
    if (other.isSetChildNode()) {
      this.ChildNode = ChildAll(other.ChildNode!!)
    }
    if (other.isSetListString()) {
      val __this__listString:ArrayList<String> = ArrayList<String>(other.listString)
      this.listString = __this__listString
    }
    if (other.isSetMapStringString()) {
      val __this__mapStringString:HashMap<String,String> = HashMap<String,String>(other.mapStringString)
      this.mapStringString = __this__mapStringString
    }
    if (other.isSetSetString()) {
      val __this__setString:HashSet<String> = HashSet<String>(other.setString)
      this.setString = __this__setString
    }
    if (other.isSetBinData()) {
      this.binData = org.apache.thrift.TBaseHelper.copyBinary(other.binData)
    }
  }

  override fun deepCopy(): HelloAll{
    return HelloAll(this)
  }

  override fun clear() {
    this.Variable1 = null
    setVariable2IsSet(false);
    this.Variable2 = 0;
    setVariable3IsSet(false);
    this.Variable3 = 0;
    this.ChildNode?.clear()
    this.listString?.clear()
    this.mapStringString?.clear()
    this.setString?.clear()
    this.binData = null
  }

  fun getVariable1():String? {
    return this.Variable1
  }

  fun setVariable1(Variable1: String?): HelloAll {
    this.Variable1 = Variable1
    return this
  }

  fun unsetVariable1() {
    this.Variable1 = null;
  }

  /** Returns true if field Variable1 is set (has been assigned a value) and false otherwise */
  fun isSetVariable1(): Boolean {
    return this.Variable1 != null;
  }

  fun setVariable1IsSet(value: Boolean) {
    if (!value) {
      this.Variable1 = null;
    }
  }

  fun getVariable2():Int {
    return this.Variable2
  }

  fun setVariable2(Variable2: Int): HelloAll {
    this.Variable2 = Variable2
    setVariable2IsSet(true);
    return this
  }

  fun unsetVariable2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VARIABLE2_ISSET_ID);
  }

  /** Returns true if field Variable2 is set (has been assigned a value) and false otherwise */
  fun isSetVariable2(): Boolean {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VARIABLE2_ISSET_ID);
  }

  fun setVariable2IsSet(value: Boolean) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VARIABLE2_ISSET_ID, value);
  }

  fun getVariable3():Long {
    return this.Variable3
  }

  fun setVariable3(Variable3: Long): HelloAll {
    this.Variable3 = Variable3
    setVariable3IsSet(true);
    return this
  }

  fun unsetVariable3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VARIABLE3_ISSET_ID);
  }

  /** Returns true if field Variable3 is set (has been assigned a value) and false otherwise */
  fun isSetVariable3(): Boolean {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VARIABLE3_ISSET_ID);
  }

  fun setVariable3IsSet(value: Boolean) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VARIABLE3_ISSET_ID, value);
  }

  fun getChildNode():ChildAll? {
    return this.ChildNode
  }

  fun setChildNode(ChildNode: ChildAll?): HelloAll {
    this.ChildNode = ChildNode
    return this
  }

  fun unsetChildNode() {
    this.ChildNode = null;
  }

  /** Returns true if field ChildNode is set (has been assigned a value) and false otherwise */
  fun isSetChildNode(): Boolean {
    return this.ChildNode != null;
  }

  fun setChildNodeIsSet(value: Boolean) {
    if (!value) {
      this.ChildNode = null;
    }
  }

  fun getListStringSize():Int {
    return this.listString?.size ?: 0
  }

  fun getListStringIterator():Iterator<String>? {
    return this.listString?.iterator()
  }

  fun addToListString(elem:String) {
    if (this.listString == null) {
      this.listString = ArrayList<String>()
    }
    this.listString?.add(elem)
  }

  fun getListString():ArrayList<String>? {
    return this.listString
  }

  fun setListString(listString: ArrayList<String>?): HelloAll {
    this.listString = listString
    return this
  }

  fun unsetListString() {
    this.listString = null;
  }

  /** Returns true if field listString is set (has been assigned a value) and false otherwise */
  fun isSetListString(): Boolean {
    return this.listString != null;
  }

  fun setListStringIsSet(value: Boolean) {
    if (!value) {
      this.listString = null;
    }
  }

  fun getMapStringStringSize():Int {
    return this.mapStringString?.size ?: 0
  }

  fun putToMapStringString(key: String, value: String) {
    if (this.mapStringString == null) {
      this.mapStringString = HashMap<String,String>()
    }
    this.mapStringString?.put(key, value)
  }

  fun getMapStringString():HashMap<String,String>? {
    return this.mapStringString
  }

  fun setMapStringString(mapStringString: HashMap<String,String>?): HelloAll {
    this.mapStringString = mapStringString
    return this
  }

  fun unsetMapStringString() {
    this.mapStringString = null;
  }

  /** Returns true if field mapStringString is set (has been assigned a value) and false otherwise */
  fun isSetMapStringString(): Boolean {
    return this.mapStringString != null;
  }

  fun setMapStringStringIsSet(value: Boolean) {
    if (!value) {
      this.mapStringString = null;
    }
  }

  fun getSetStringSize():Int {
    return this.setString?.size ?: 0
  }

  fun getSetStringIterator():Iterator<String>? {
    return this.setString?.iterator()
  }

  fun addToSetString(elem:String) {
    if (this.setString == null) {
      this.setString = HashSet<String>()
    }
    this.setString?.add(elem)
  }

  fun getSetString():HashSet<String>? {
    return this.setString
  }

  fun setSetString(setString: HashSet<String>?): HelloAll {
    this.setString = setString
    return this
  }

  fun unsetSetString() {
    this.setString = null;
  }

  /** Returns true if field setString is set (has been assigned a value) and false otherwise */
  fun isSetSetString(): Boolean {
    return this.setString != null;
  }

  fun setSetStringIsSet(value: Boolean) {
    if (!value) {
      this.setString = null;
    }
  }

  fun getBinData():ByteArray? {
    setBinData(org.apache.thrift.TBaseHelper.rightSize(binData));
    return binData?.array()
  }

  fun bufferForBinData():java.nio.ByteBuffer? {
    return org.apache.thrift.TBaseHelper.copyBinary(binData)
  }

  fun setBinData(binData: ByteArray?): HelloAll {
    this.binData = if(binData == null) null   else java.nio.ByteBuffer.wrap(binData.clone())
    return this
  }

  fun setBinData(binData: java.nio.ByteBuffer?): HelloAll {
    this.binData = org.apache.thrift.TBaseHelper.copyBinary(binData)
    return this
  }

  fun unsetBinData() {
    this.binData = null;
  }

  /** Returns true if field binData is set (has been assigned a value) and false otherwise */
  fun isSetBinData(): Boolean {
    return this.binData != null;
  }

  fun setBinDataIsSet(value: Boolean) {
    if (!value) {
      this.binData = null;
    }
  }

  override fun setFieldValue(field: _Fields,  value: Any?) {
    when (field) {
    _Fields.VARIABLE1 ->
      if (value == null) {
        unsetVariable1()
      } else {
        setVariable1(value as String)
      }

    _Fields.VARIABLE2 ->
      if (value == null) {
        unsetVariable2()
      } else {
        setVariable2(value as Int)
      }

    _Fields.VARIABLE3 ->
      if (value == null) {
        unsetVariable3()
      } else {
        setVariable3(value as Long)
      }

    _Fields.CHILD_NODE ->
      if (value == null) {
        unsetChildNode()
      } else {
        setChildNode(value as ChildAll)
      }

    _Fields.LIST_STRING ->
      if (value == null) {
        unsetListString()
      } else {
        setListString(value as ArrayList<String>)
      }

    _Fields.MAP_STRING_STRING ->
      if (value == null) {
        unsetMapStringString()
      } else {
        setMapStringString(value as HashMap<String,String>)
      }

    _Fields.SET_STRING ->
      if (value == null) {
        unsetSetString()
      } else {
        setSetString(value as HashSet<String>)
      }

    _Fields.BIN_DATA ->
      if (value == null) {
        unsetBinData()
      } else {
        if (value is ByteArray) {
          setBinData(value)
        } else {
          setBinData(value as java.nio.ByteBuffer)
        }
      }

    }
  }

  override fun getFieldValue(field: _Fields): Any? {
    return when(field) {
      _Fields.VARIABLE1 -> getVariable1()
      _Fields.VARIABLE2 -> getVariable2()
      _Fields.VARIABLE3 -> getVariable3()
      _Fields.CHILD_NODE -> getChildNode()
      _Fields.LIST_STRING -> getListString()
      _Fields.MAP_STRING_STRING -> getMapStringString()
      _Fields.SET_STRING -> getSetString()
      _Fields.BIN_DATA -> getBinData()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: _Fields): Boolean {
    return when (field) {
      _Fields.VARIABLE1->isSetVariable1()
      _Fields.VARIABLE2->isSetVariable2()
      _Fields.VARIABLE3->isSetVariable3()
      _Fields.CHILD_NODE->isSetChildNode()
      _Fields.LIST_STRING->isSetListString()
      _Fields.MAP_STRING_STRING->isSetMapStringString()
      _Fields.SET_STRING->isSetSetString()
      _Fields.BIN_DATA->isSetBinData()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is HelloAll)
        return this.equals(other)
    return false
  }

  fun equals(other: HelloAll?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_Variable1: Boolean = true && this.isSetVariable1()
    val other_present_Variable1: Boolean = true && other.isSetVariable1()
    if (this_present_Variable1 || other_present_Variable1) {
      if (!(this_present_Variable1 && other_present_Variable1))
        return false;
      if (!this.Variable1!!.equals(other.Variable1))
        return false;
    }

    val this_present_Variable2: Boolean = true
    val other_present_Variable2: Boolean = true
    if (this_present_Variable2 || other_present_Variable2) {
      if (!(this_present_Variable2 && other_present_Variable2))
        return false;
      if (this.Variable2 != other.Variable2)
        return false;
    }

    val this_present_Variable3: Boolean = true
    val other_present_Variable3: Boolean = true
    if (this_present_Variable3 || other_present_Variable3) {
      if (!(this_present_Variable3 && other_present_Variable3))
        return false;
      if (this.Variable3 != other.Variable3)
        return false;
    }

    val this_present_ChildNode: Boolean = true && this.isSetChildNode()
    val other_present_ChildNode: Boolean = true && other.isSetChildNode()
    if (this_present_ChildNode || other_present_ChildNode) {
      if (!(this_present_ChildNode && other_present_ChildNode))
        return false;
      if (!this.ChildNode!!.equals(other.ChildNode))
        return false;
    }

    val this_present_listString: Boolean = true && this.isSetListString()
    val other_present_listString: Boolean = true && other.isSetListString()
    if (this_present_listString || other_present_listString) {
      if (!(this_present_listString && other_present_listString))
        return false;
      if (!this.listString!!.equals(other.listString))
        return false;
    }

    val this_present_mapStringString: Boolean = true && this.isSetMapStringString()
    val other_present_mapStringString: Boolean = true && other.isSetMapStringString()
    if (this_present_mapStringString || other_present_mapStringString) {
      if (!(this_present_mapStringString && other_present_mapStringString))
        return false;
      if (!this.mapStringString!!.equals(other.mapStringString))
        return false;
    }

    val this_present_setString: Boolean = true && this.isSetSetString()
    val other_present_setString: Boolean = true && other.isSetSetString()
    if (this_present_setString || other_present_setString) {
      if (!(this_present_setString && other_present_setString))
        return false;
      if (!this.setString!!.equals(other.setString))
        return false;
    }

    val this_present_binData: Boolean = true && this.isSetBinData()
    val other_present_binData: Boolean = true && other.isSetBinData()
    if (this_present_binData || other_present_binData) {
      if (!(this_present_binData && other_present_binData))
        return false;
      if (!this.binData!!.equals(other.binData))
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + (if(isSetVariable1()) 131071 else 524287)
    if (isSetVariable1())
      hashCode = hashCode * 8191 + Variable1.hashCode()

    hashCode = hashCode * 8191 + Variable2

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(Variable3)

    hashCode = hashCode * 8191 + (if(isSetChildNode()) 131071 else 524287)
    if (isSetChildNode())
      hashCode = hashCode * 8191 + ChildNode.hashCode();

    hashCode = hashCode * 8191 + (if(isSetListString()) 131071 else 524287)
    if (isSetListString())
      hashCode = hashCode * 8191 + listString.hashCode();

    hashCode = hashCode * 8191 + (if(isSetMapStringString()) 131071 else 524287)
    if (isSetMapStringString())
      hashCode = hashCode * 8191 + mapStringString.hashCode();

    hashCode = hashCode * 8191 + (if(isSetSetString()) 131071 else 524287)
    if (isSetSetString())
      hashCode = hashCode * 8191 + setString.hashCode();

    hashCode = hashCode * 8191 + (if(isSetBinData()) 131071 else 524287)
    if (isSetBinData())
      hashCode = hashCode * 8191 + binData.hashCode()

    return hashCode;
  }

  override fun compareTo(other: HelloAll):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetVariable1(), other.isSetVariable1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Variable1, other.Variable1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVariable2(), other.isSetVariable2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Variable2, other.Variable2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVariable3(), other.isSetVariable3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Variable3, other.Variable3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetChildNode(), other.isSetChildNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ChildNode, other.ChildNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetListString(), other.isSetListString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listString, other.listString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMapStringString(), other.isSetMapStringString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapStringString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapStringString, other.mapStringString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSetString(), other.isSetSetString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setString, other.setString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinData(), other.isSetBinData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binData, other.binData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Int):_Fields? {
    return _Fields.findByThriftId(fieldId)
  }

  override fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<HelloAll>(iprot).read(iprot, this)
  }

  override fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<HelloAll>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("HelloAll(")
    var first:Boolean = true

    sb.append("Variable1:")
    if (this.Variable1 == null) {
      sb.append("null")
    } else {
      sb.append(this.Variable1)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("Variable2:")
    sb.append(this.Variable2)
    first = false
    if (!first) sb.append(", ")
    sb.append("Variable3:")
    sb.append(this.Variable3)
    first = false
    if (!first) sb.append(", ")
    sb.append("ChildNode:")
    if (this.ChildNode == null) {
      sb.append("null")
    } else {
      sb.append(this.ChildNode)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("listString:")
    if (this.listString == null) {
      sb.append("null")
    } else {
      sb.append(this.listString)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("mapStringString:")
    if (this.mapStringString == null) {
      sb.append("null")
    } else {
      sb.append(this.mapStringString)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("setString:")
    if (this.setString == null) {
      sb.append("null")
    } else {
      sb.append(this.setString)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("binData:")
    if (this.binData == null) {
      sb.append("null")
    } else {
      org.apache.thrift.TBaseHelper.toString(binData!!, sb)
    }
    first = false
    sb.append(")");
    return sb.toString()
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
    ChildNode?.validate();
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      // it doesn't seem like you should have to do this, but kotlin serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class HelloAllStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<HelloAllStandardScheme> {
    override fun getScheme():HelloAllStandardScheme {
      return HelloAllStandardScheme()
    }
  }

  private class HelloAllStandardScheme : org.apache.thrift.scheme.StandardScheme<HelloAll>() {

    override fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // VARIABLE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Variable1 = iprot.readString()
              struct.setVariable1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          2 -> // VARIABLE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Variable2 = iprot.readI32()
              struct.setVariable2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          3 -> // VARIABLE3
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Variable3 = iprot.readI64()
              struct.setVariable3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          4 -> // CHILD_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ChildNode = ChildAll()
              struct.ChildNode?.read(iprot)
              struct.setChildNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          5 -> // LIST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              val _list0:org.apache.thrift.protocol.TList = iprot.readListBegin()
              struct.listString = ArrayList<String>(_list0.size)
              var _elem1: String?  = null
              for (_i2 in 0.._list0.size)
              {
                _elem1 = iprot.readString()
                struct.listString?.add(_elem1)
              }
              iprot.readListEnd();
              struct.setListStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          6 -> // MAP_STRING_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              val _map3:org.apache.thrift.protocol.TMap = iprot.readMapBegin()
              struct.mapStringString = HashMap<String,String>()
              var _key4: String?  = null
              var _val5: String?  = null
              for (_i6 in 0.._map3.size)
              {
                _key4 = iprot.readString()
                _val5 = iprot.readString()
                struct.mapStringString?.put(_key4, _val5);
              }
              iprot.readMapEnd();
              struct.setMapStringStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          7 -> // SET_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              val _set7:org.apache.thrift.protocol.TSet = iprot.readSetBegin()
              struct.setString = HashSet<String>()
              var _elem8: String?  = null
              for (_i9 in 0.._set7.size)
              {
                _elem8 = iprot.readString()
                struct.setString?.add(_elem8)
              }
              iprot.readSetEnd();
              struct.setSetStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          8 -> // BIN_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binData = iprot.readBinary()
              struct.setBinDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      if (struct.Variable1 != null) {
        oprot.writeFieldBegin(VARIABLE1_FIELD_DESC)
        oprot.writeString(struct.Variable1)
        oprot.writeFieldEnd()
      }
      oprot.writeFieldBegin(VARIABLE2_FIELD_DESC)
      oprot.writeI32(struct.Variable2)
      oprot.writeFieldEnd()
      oprot.writeFieldBegin(VARIABLE3_FIELD_DESC)
      oprot.writeI64(struct.Variable3)
      oprot.writeFieldEnd()
      if (struct.ChildNode != null) {
        oprot.writeFieldBegin(CHILD_NODE_FIELD_DESC)
        struct.ChildNode?.write(oprot);
        oprot.writeFieldEnd()
      }
      if (struct.listString != null) {
        oprot.writeFieldBegin(LIST_STRING_FIELD_DESC)
        oprot.writeListBegin(org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listString!!.size))
        for (_iter10:String in struct.listString!!)
        {
          oprot.writeString(_iter10)
        }
        oprot.writeListEnd()
        oprot.writeFieldEnd()
      }
      if (struct.mapStringString != null) {
        oprot.writeFieldBegin(MAP_STRING_STRING_FIELD_DESC)
        oprot.writeMapBegin(org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapStringString!!.size))
        for (_iter11:MutableMap.MutableEntry<String, String> in struct.mapStringString!!.entries)
        {
          oprot.writeString(_iter11.key)
          oprot.writeString(_iter11.value)
        }
        oprot.writeMapEnd()
        oprot.writeFieldEnd()
      }
      if (struct.setString != null) {
        oprot.writeFieldBegin(SET_STRING_FIELD_DESC)
        oprot.writeSetBegin(org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.setString!!.size))
        for (_iter12:String in struct.setString!!)
        {
          oprot.writeString(_iter12)
        }
        oprot.writeSetEnd()
        oprot.writeFieldEnd()
      }
      if (struct.binData != null) {
        oprot.writeFieldBegin(BIN_DATA_FIELD_DESC)
        oprot.writeBinary(struct.binData)
        oprot.writeFieldEnd()
      }
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class HelloAllTupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<HelloAllTupleScheme> {
    override fun getScheme():HelloAllTupleScheme {
      return HelloAllTupleScheme()
    }
  }

  private class HelloAllTupleScheme : org.apache.thrift.scheme.TupleScheme<HelloAll>() {

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetVariable1()) {
        optionals.set(0)
      }
      if (struct.isSetVariable2()) {
        optionals.set(1)
      }
      if (struct.isSetVariable3()) {
        optionals.set(2)
      }
      if (struct.isSetChildNode()) {
        optionals.set(3)
      }
      if (struct.isSetListString()) {
        optionals.set(4)
      }
      if (struct.isSetMapStringString()) {
        optionals.set(5)
      }
      if (struct.isSetSetString()) {
        optionals.set(6)
      }
      if (struct.isSetBinData()) {
        optionals.set(7)
      }
      prot.writeBitSet(optionals, 8)
      if (struct.isSetVariable1()) {
        oprot.writeString(struct.Variable1)
      }
      if (struct.isSetVariable2()) {
        oprot.writeI32(struct.Variable2)
      }
      if (struct.isSetVariable3()) {
        oprot.writeI64(struct.Variable3)
      }
      if (struct.isSetChildNode()) {
        struct.ChildNode?.write(oprot);
      }
      if (struct.isSetListString()) {
        oprot.writeI32(struct.listString!!.size)
        for (_iter13:String in struct.listString!!)
        {
          oprot.writeString(_iter13)
        }
      }
      if (struct.isSetMapStringString()) {
        oprot.writeI32(struct.mapStringString!!.size)
        for (_iter14:MutableMap.MutableEntry<String, String> in struct.mapStringString!!.entries)
        {
          oprot.writeString(_iter14.key)
          oprot.writeString(_iter14.value)
        }
      }
      if (struct.isSetSetString()) {
        oprot.writeI32(struct.setString!!.size)
        for (_iter15:String in struct.setString!!)
        {
          oprot.writeString(_iter15)
        }
      }
      if (struct.isSetBinData()) {
        oprot.writeBinary(struct.binData)
      }
    }

    override fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:HelloAll) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(8)
      if (incoming.get(0)) {
        struct.Variable1 = iprot.readString()
        struct.setVariable1IsSet(true)
      }
      if (incoming.get(1)) {
        struct.Variable2 = iprot.readI32()
        struct.setVariable2IsSet(true)
      }
      if (incoming.get(2)) {
        struct.Variable3 = iprot.readI64()
        struct.setVariable3IsSet(true)
      }
      if (incoming.get(3)) {
        struct.ChildNode = ChildAll()
        struct.ChildNode?.read(iprot)
        struct.setChildNodeIsSet(true)
      }
      if (incoming.get(4)) {
        val _list16:org.apache.thrift.protocol.TList  = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING)
        struct.listString = ArrayList<String>(_list16.size)
        var _elem17: String?  = null
        for (_i18 in 0.._list16.size)
        {
          _elem17 = iprot.readString()
          struct.listString?.add(_elem17)
        }
        struct.setListStringIsSet(true)
      }
      if (incoming.get(5)) {
        val _map19:org.apache.thrift.protocol.TMap  = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING) 
        struct.mapStringString = HashMap<String,String>()
        var _key20: String?  = null
        var _val21: String?  = null
        for (_i22 in 0.._map19.size)
        {
          _key20 = iprot.readString()
          _val21 = iprot.readString()
          struct.mapStringString?.put(_key20, _val21);
        }
        struct.setMapStringStringIsSet(true)
      }
      if (incoming.get(6)) {
        val _set23:org.apache.thrift.protocol.TSet  = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING)
        struct.setString = HashSet<String>()
        var _elem24: String?  = null
        for (_i25 in 0.._set23.size)
        {
          _elem24 = iprot.readString()
          struct.setString?.add(_elem24)
        }
        struct.setSetStringIsSet(true)
      }
      if (incoming.get(7)) {
        struct.binData = iprot.readBinary()
        struct.setBinDataIsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("HelloAll");

    private val VARIABLE1_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("Variable1", org.apache.thrift.protocol.TType.STRING, 1.toShort());
    private val VARIABLE2_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("Variable2", org.apache.thrift.protocol.TType.I32, 2.toShort());
    private val VARIABLE3_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("Variable3", org.apache.thrift.protocol.TType.I64, 3.toShort());
    private val CHILD_NODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("ChildNode", org.apache.thrift.protocol.TType.STRUCT, 4.toShort());
    private val LIST_STRING_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("listString", org.apache.thrift.protocol.TType.LIST, 5.toShort());
    private val MAP_STRING_STRING_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("mapStringString", org.apache.thrift.protocol.TType.MAP, 6.toShort());
    private val SET_STRING_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("setString", org.apache.thrift.protocol.TType.SET, 7.toShort());
    private val BIN_DATA_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("binData", org.apache.thrift.protocol.TType.STRING, 8.toShort());

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<HelloAllStandardScheme> = HelloAllStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<HelloAllTupleScheme> = HelloAllTupleSchemeFactory()
    // isset id assignments
    private val __VARIABLE2_ISSET_ID: Int = 0
    private val __VARIABLE3_ISSET_ID: Int = 1
    val metaDataMap: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.VARIABLE1 to org.apache.thrift.meta_data.FieldMetaData("Variable1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      _Fields.VARIABLE2 to org.apache.thrift.meta_data.FieldMetaData("Variable2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)),
      _Fields.VARIABLE3 to org.apache.thrift.meta_data.FieldMetaData("Variable3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)),
      _Fields.CHILD_NODE to org.apache.thrift.meta_data.FieldMetaData("ChildNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChildAll::class.java)),
      _Fields.LIST_STRING to org.apache.thrift.meta_data.FieldMetaData("listString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))),
      _Fields.MAP_STRING_STRING to org.apache.thrift.meta_data.FieldMetaData("mapStringString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))),
      _Fields.SET_STRING to org.apache.thrift.meta_data.FieldMetaData("setString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))),
      _Fields.BIN_DATA to org.apache.thrift.meta_data.FieldMetaData("binData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloAll::class.java, metaDataMap)
    }
    private fun <S : org.apache.thrift.TBase<*, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme is org.apache.thrift.scheme.StandardScheme<*>) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

