/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-05-29")
public class Error( 
  /**
   * 
   * @see ErrorCodes
   */
  private var errorCode: ErrorCodes?  = null, // required
  private var reason: String?  = null // required
): org.apache.thrift.TException(),  org.apache.thrift.TBase<Error, Error._Fields>, java.io.Serializable, Cloneable, Comparable<Error> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum class _Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ErrorCodes
     */
    ERROR_CODE(1, "errorCode"),
    REASON(2, "reason");

    companion object {
      var byName: Map<String, _Fields> = mapOf(
        /**
         * 
         * @see ErrorCodes
         */
        "errorCode" to ERROR_CODE,
        "reason" to REASON
      )
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Int): _Fields? {
        return when(fieldId) {
          1 -> // ERROR_CODE
            ERROR_CODE
          2 -> // REASON
            REASON
          else ->
            null
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Int): _Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): _Fields? {
        return byName.get(name)
      }
    }
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: Error) : this() {
    if (other.isSetErrorCode()) {
      this.errorCode = other.errorCode
    }
    if (other.isSetReason()) {
      this.reason = other.reason
    }
  }

  override fun deepCopy(): Error{
    return Error(this)
  }

  override fun clear() {
    this.errorCode = null
    this.reason = null
  }

  /**
   * 
   * @see ErrorCodes
   */
  fun getErrorCode():ErrorCodes? {
    return this.errorCode
  }

  /**
   * 
   * @see ErrorCodes
   */
  fun setErrorCode(errorCode: ErrorCodes?): Error {
    this.errorCode = errorCode
    return this
  }

  fun unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  fun isSetErrorCode(): Boolean {
    return this.errorCode != null;
  }

  fun setErrorCodeIsSet(value: Boolean) {
    if (!value) {
      this.errorCode = null;
    }
  }

  fun getReason():String? {
    return this.reason
  }

  fun setReason(reason: String?): Error {
    this.reason = reason
    return this
  }

  fun unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  fun isSetReason(): Boolean {
    return this.reason != null;
  }

  fun setReasonIsSet(value: Boolean) {
    if (!value) {
      this.reason = null;
    }
  }

  override fun setFieldValue(field: _Fields,  value: Any?) {
    when (field) {
    _Fields.ERROR_CODE ->
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode(value as ErrorCodes);
      }

    _Fields.REASON ->
      if (value == null) {
        unsetReason();
      } else {
        setReason(value as String);
      }

    }
  }

  override fun getFieldValue(field: _Fields): Any? {
    return when(field) {
      _Fields.ERROR_CODE -> getErrorCode()
      _Fields.REASON -> getReason()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: _Fields): Boolean {
    return when (field) {
      _Fields.ERROR_CODE->isSetErrorCode()
      _Fields.REASON->isSetReason()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is Error)
        return this.equals(other)
    return false
  }

  fun equals(other: Error?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_errorCode: Boolean = true && this.isSetErrorCode()
    val other_present_errorCode: Boolean = true && other.isSetErrorCode()
    if (this_present_errorCode || other_present_errorCode) {
      if (!(this_present_errorCode && other_present_errorCode))
        return false;
      if (!this.errorCode!!.equals(other.errorCode))
        return false;
    }

    val this_present_reason: Boolean = true && this.isSetReason()
    val other_present_reason: Boolean = true && other.isSetReason()
    if (this_present_reason || other_present_reason) {
      if (!(this_present_reason && other_present_reason))
        return false;
      if (!this.reason!!.equals(other.reason))
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + (if(isSetErrorCode()) 131071 else 524287)
    if (isSetErrorCode())
      hashCode = hashCode * 8191 + errorCode!!.value

    hashCode = hashCode * 8191 + (if(isSetReason()) 131071 else 524287)
    if (isSetReason())
      hashCode = hashCode * 8191 + reason.hashCode()

    return hashCode;
  }

  override fun compareTo(other: Error):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReason(), other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Int):_Fields? {
    return _Fields.findByThriftId(fieldId)
  }

  override fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<Error>(iprot).read(iprot, this)
  }

  override fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<Error>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("Error(");
    var first:Boolean = true

    sb.append("errorCode:");
    if (this.errorCode == null) {
      sb.append("null");
    } else {
      sb.append(this.errorCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class ErrorStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<ErrorStandardScheme> {
    override fun getScheme():ErrorStandardScheme {
      return ErrorStandardScheme()
    }
  }

  private class ErrorStandardScheme : org.apache.thrift.scheme.StandardScheme<Error>() {

    override fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:Error) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorCode = com.testing.api.ErrorCodes.findByValue(iprot.readI32());
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          2 -> // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:Error) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      if (struct.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC)
        oprot.writeI32(struct.errorCode!!.value)
        oprot.writeFieldEnd()
      }
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC)
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd()
      }
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class ErrorTupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<ErrorTupleScheme> {
    override fun getScheme():ErrorTupleScheme {
      return ErrorTupleScheme()
    }
  }

  private class ErrorTupleScheme : org.apache.thrift.scheme.TupleScheme<Error>() {

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:Error) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetErrorCode()) {
        optionals.set(0)
      }
      if (struct.isSetReason()) {
        optionals.set(1)
      }
      prot.writeBitSet(optionals, 2)
      if (struct.isSetErrorCode()) {
        oprot.writeI32(struct.errorCode!!.value)
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
    }

    override fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:Error) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(2)
      if (incoming.get(0)) {
        struct.errorCode = com.testing.api.ErrorCodes.findByValue(iprot.readI32());
        struct.setErrorCodeIsSet(true)
      }
      if (incoming.get(1)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("Error");

    private val ERROR_CODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, 1.toShort());
    private val REASON_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, 2.toShort());

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<ErrorStandardScheme> = ErrorStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<ErrorTupleScheme> = ErrorTupleSchemeFactory()
    // isset id assignments
    val metaDataMap: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.ERROR_CODE to org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ErrorCodes::class.java)),
      _Fields.REASON to org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Error::class.java, metaDataMap)
    }
    private fun <S : org.apache.thrift.TBase<*, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme is org.apache.thrift.scheme.StandardScheme<*>) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

