/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-06-26")
public class ABCombiner() : org.apache.thrift.TUnion<ABCombiner, ABCombiner.Fields>() {
  constructor(other: ABCombiner): this() {
    fromDeepCopy(other)
  }
  override fun deepCopy(): ABCombiner{
    return ABCombiner(this)
  }

  private val metaDataMap: Map<Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
    Fields.A to org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, A::class.java)),
    Fields.B to org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, B::class.java)))
  init {
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ABCombiner::class.java, metaDataMap)
  }

  @Throws(java.lang.ClassCastException::class)
  override fun checkType(setField: Fields, value: Any?) {
    when (setField) {
      Fields.A -> {
        if (value !is A) {
          throw java.lang.ClassCastException("Was expecting value of type A for field 'a', but got ${value?.javaClass?.simpleName}")
        }
      }
      Fields.B -> {
        if (value !is B) {
          throw java.lang.ClassCastException("Was expecting value of type B for field 'b', but got ${value?.javaClass?.simpleName}")
        }
      }
      else -> 
        throw java.lang.IllegalArgumentException("Unknown field id $setField")
    }
  }

  @Throws(org.apache.thrift.TException::class)
  override fun standardSchemeReadValue( iprot: org.apache.thrift.protocol.TProtocol, field: org.apache.thrift.protocol.TField): Any? {
    val setField:Fields? = Fields.findByThriftId(field.id)
    if (setField != null) {
      when (setField) {
        Fields.A -> {
          if (field.type == A_FIELD_DESC.type) {
            var a: A
            a = A()
            a?.read(iprot)
            return a
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type)
            return null
          }
        }
        Fields.B -> {
          if (field.type == B_FIELD_DESC.type) {
            var b: B
            b = B()
            b?.read(iprot)
            return b
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type)
            return null
          }
        }
        else ->
          throw java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type)
      return null
    }
  }

  @Throws(org.apache.thrift.TException::class)
  override fun standardSchemeWriteValue(oprot: org.apache.thrift.protocol.TProtocol) {
    when (uSetField) {
      Fields.A -> {
        val a: A = uFieldValue as A
        a?.write(oprot);
        return
      }
      Fields.B -> {
        val b: B = uFieldValue as B
        b?.write(oprot);
        return
      }
      else ->
        throw java.lang.IllegalStateException("Cannot write union with unknown field $uSetField")
    }
  }

  override fun tupleSchemeReadValue(iprot: org.apache.thrift.protocol.TProtocol, fieldID:Short):Any {
    val setField:Fields? = Fields.findByThriftId(fieldID)
    if (setField != null) {
      return when (setField) {
        Fields.A -> {
          val a:A
          a = A()
          a?.read(iprot)
          a
        }
        Fields.B -> {
          val b:B
          b = B()
          b?.read(iprot)
          b
        }
        else ->
          throw java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!")
      }
    } else {
      throw org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID)
    }
  }

  override fun tupleSchemeWriteValue(oprot: org.apache.thrift.protocol.TProtocol) {
    when (uSetField) {
      Fields.A -> {
        val a:A = uFieldValue as A
        a?.write(oprot);
        return
      }
      Fields.B -> {
        val b:B = uFieldValue as B
        b?.write(oprot);
        return
      }
      else -> 
        throw java.lang.IllegalStateException("Cannot write union with unknown field $uSetField")
    }
  }

  override fun getFieldDesc(setField:Fields?):org.apache.thrift.protocol.TField {
    return when (setField) {
      Fields.A -> 
        return A_FIELD_DESC
      Fields.B -> 
        return B_FIELD_DESC
      else -> 
        throw java.lang.IllegalArgumentException("Unknown field id $setField")
    }
  }

  override fun getStructDesc():org.apache.thrift.protocol.TStruct {
    return STRUCT_DESC
  }

  override fun enumForId(id: Short): Fields {
    return Fields.findByThriftIdOrThrow(id)
  }

  override fun fieldForId(fieldId: Short):Fields? {
    return Fields.findByThriftId(fieldId)
  }


  fun getA(): A {
    if (uSetField == Fields.A) {
      return uFieldValue as A
    } else {
      throw java.lang.RuntimeException("Cannot get field 'a' because union is currently set to ${getFieldDesc(uSetField).name})")
    }
  }

  fun setA(value: A) {
    uSetField = Fields.A
    uFieldValue = java.util.Objects.requireNonNull(value,"Fields.A")
  }

  fun getB(): B {
    if (uSetField == Fields.B) {
      return uFieldValue as B
    } else {
      throw java.lang.RuntimeException("Cannot get field 'b' because union is currently set to ${getFieldDesc(uSetField).name})")
    }
  }

  fun setB(value: B) {
    uSetField = Fields.B
    uFieldValue = java.util.Objects.requireNonNull(value,"Fields.B")
  }

  fun isSetA(): Boolean {
    return uSetField == Fields.A
  }


  fun isSetB(): Boolean {
    return uSetField == Fields.B
  }


  override fun equals(other: Any?):Boolean {
    if (other is ABCombiner) {
      return equals(other)
    } else {
      return false
    }
  }

  fun equals(other:ABCombiner?):Boolean {
    return other != null && uSetField == other.uSetField && uFieldValue?.equals(other.uFieldValue) ?: false
  }

  override fun compareTo(other:ABCombiner):Int {
    val lastComparison:Int = org.apache.thrift.TBaseHelper.compareTo(uSetField, other.uSetField)
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(uFieldValue, other.uFieldValue)
    }
    return lastComparison
  }

  override fun hashCode():Int {
    val list:ArrayList<Any?> = ArrayList()
    list.add(this::class.java.getName())
    val setField: org.apache.thrift.TFieldIdEnum? = uSetField
    if (setField != null) {
      list.add(setField.thriftFieldId)
      val value: Any? = uFieldValue
      if (value is org.apache.thrift.TEnum) {
        list.add((uFieldValue as org.apache.thrift.TEnum).value)
      } else {
        list.add(value)
      }
    }
    return list.hashCode()
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }


  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }


  companion object   {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("ABCombiner");
    private val A_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, 1.toShort());
    private val B_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRUCT, 2.toShort());
    fun a(value: A): ABCombiner{
      val x:ABCombiner = ABCombiner()
      x.setA(value)
      return x
    }

    fun b(value: B): ABCombiner{
      val x:ABCombiner = ABCombiner()
      x.setB(value)
      return x
    }

  }

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  enum class Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    A(1, "a"),
    B(2, "b");

    companion object {
      var byName: Map<String, Fields> = mapOf(
        "a" to A,
        "b" to B
      )
      /**
       * Find the Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Short): Fields? {
        return when(fieldId) {
          1.toShort() -> // A
            A
          2.toShort() -> // B
            B
          else ->
            null
        }
      }

      /**
       * Find the Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Short): Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): Fields? {
        return byName.get(name)
      }
    }
  }


}
