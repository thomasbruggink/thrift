/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.testing.api;

@javax.annotation.processing.Generated(value = ["Autogenerated by Thrift Compiler (0.15.0)"], date = "2021-06-26")
public class B( 
  private var p3: String?  = null, // required
  private var p4: String?  = null // required
): org.apache.thrift.TBase<B, B.Fields>, java.io.Serializable, Cloneable, Comparable<B> {

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  enum class Fields(
    override val thriftFieldId: Short,
    override val fieldName: String
  ) : org.apache.thrift.TFieldIdEnum {
    P3(1, "p3"),
    P4(2, "p4");

    companion object {
      var byName: Map<String, Fields> = mapOf(
        "p3" to P3,
        "p4" to P4
      )
      /**
       * Find the Fields constant that matches fieldId, or null if its not found.
       */
      fun findByThriftId(fieldId: Short): Fields? {
        return when(fieldId) {
          1.toShort() -> // P3
            P3
          2.toShort() -> // P4
            P4
          else ->
            null
        }
      }

      /**
       * Find the Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      fun findByThriftIdOrThrow(fieldId: Short): Fields {
        return findByThriftId(fieldId)
          ?: throw java.lang.IllegalArgumentException("Field $fieldId doesn't exist!");
      }

      /**
       * Find the Fields constant that matches name, or null if its not found.
       */
      fun findByName(name: String): Fields? {
        return byName.get(name)
      }
    }
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  constructor(other: B) : this() {
    if (other.isSetP3()) {
      this.p3 = other.p3
    }
    if (other.isSetP4()) {
      this.p4 = other.p4
    }
  }

  override fun deepCopy(): B{
    return B(this)
  }

  override fun clear() {
    this.p3 = null
    this.p4 = null
  }

  fun getP3():String? {
    return this.p3
  }

  fun setP3(p3: String?): B {
    this.p3 = p3
    return this
  }

  fun unsetP3() {
    this.p3 = null;
  }

  /** Returns true if field p3 is set (has been assigned a value) and false otherwise */
  fun isSetP3(): Boolean {
    return this.p3 != null;
  }

  fun setP3IsSet(value: Boolean) {
    if (!value) {
      this.p3 = null;
    }
  }

  fun getP4():String? {
    return this.p4
  }

  fun setP4(p4: String?): B {
    this.p4 = p4
    return this
  }

  fun unsetP4() {
    this.p4 = null;
  }

  /** Returns true if field p4 is set (has been assigned a value) and false otherwise */
  fun isSetP4(): Boolean {
    return this.p4 != null;
  }

  fun setP4IsSet(value: Boolean) {
    if (!value) {
      this.p4 = null;
    }
  }

  override fun setFieldValue(field: Fields,  value: Any?) {
    when (field) {
    Fields.P3 ->
      if (value == null) {
        unsetP3()
      } else {
        setP3(value as String)
      }

    Fields.P4 ->
      if (value == null) {
        unsetP4()
      } else {
        setP4(value as String)
      }

    }
  }

  override fun getFieldValue(field: Fields): Any? {
    return when(field) {
      Fields.P3 -> getP3()
      Fields.P4 -> getP4()
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  override fun isSet(field: Fields): Boolean {
    return when (field) {
      Fields.P3->isSetP3()
      Fields.P4->isSetP4()
    }
  }

  override fun equals(other: Any?): Boolean {
    if (other is B)
        return this.equals(other)
    return false
  }

  fun equals(other: B?):Boolean {
    if (other == null)
      return false
    if (this == other)
      return true

    val this_present_p3: Boolean = true && this.isSetP3()
    val other_present_p3: Boolean = true && other.isSetP3()
    if (this_present_p3 || other_present_p3) {
      if (!(this_present_p3 && other_present_p3))
        return false;
      if (!this.p3!!.equals(other.p3))
        return false;
    }

    val this_present_p4: Boolean = true && this.isSetP4()
    val other_present_p4: Boolean = true && other.isSetP4()
    if (this_present_p4 || other_present_p4) {
      if (!(this_present_p4 && other_present_p4))
        return false;
      if (!this.p4!!.equals(other.p4))
        return false;
    }

    return true;
  }

  override fun hashCode():Int {
    var hashCode: Int = 1

    hashCode = hashCode * 8191 + (if(isSetP3()) 131071 else 524287)
    if (isSetP3())
      hashCode = hashCode * 8191 + p3.hashCode()

    hashCode = hashCode * 8191 + (if(isSetP4()) 131071 else 524287)
    if (isSetP4())
      hashCode = hashCode * 8191 + p4.hashCode()

    return hashCode;
  }

  override fun compareTo(other: B):Int {
    if (!javaClass.equals(other.javaClass)) {
      return javaClass.getName().compareTo(other.javaClass.getName())
    }

    var lastComparison:Int = 0

    lastComparison = java.lang.Boolean.compare(isSetP3(), other.isSetP3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p3, other.p3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetP4(), other.isSetP4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p4, other.p4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  override fun fieldForId(fieldId: Short):Fields? {
    return Fields.findByThriftId(fieldId)
  }

  override fun read(iprot: org.apache.thrift.protocol.TProtocol) {
    scheme<B>(iprot).read(iprot, this)
  }

  override fun write(oprot: org.apache.thrift.protocol.TProtocol) {
    scheme<B>(oprot).write(oprot, this)
  }

  override fun toString():String {
    val sb:java.lang.StringBuilder = java.lang.StringBuilder("B(")
    var first:Boolean = true

    sb.append("p3:")
    if (this.p3 == null) {
      sb.append("null")
    } else {
      sb.append(this.p3)
    }
    first = false
    if (!first) sb.append(", ")
    sb.append("p4:")
    if (this.p4 == null) {
      sb.append("null")
    } else {
      sb.append(this.p4)
    }
    first = false
    sb.append(")");
    return sb.toString()
  }

  fun validate() {
    // check for required fields
    // check for sub-struct validity
  }

  fun writeObject(out:java.io.ObjectOutputStream) {
    try {
      write(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(out)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  fun readObject(inp:java.io.ObjectInputStream) {
    try {
      read(org.apache.thrift.protocol.TCompactProtocol(org.apache.thrift.transport.TIOStreamTransport(inp)))
    } catch (te:org.apache.thrift.TException) {
      throw java.io.IOException(te);
    }
  }

  private class BStandardSchemeFactory : org.apache.thrift.scheme.SchemeFactory<BStandardScheme> {
    override fun getScheme():BStandardScheme {
      return BStandardScheme()
    }
  }

  private class BStandardScheme : org.apache.thrift.scheme.StandardScheme<B>() {

    override fun read(iprot:org.apache.thrift.protocol.TProtocol, struct:B) {
      lateinit var schemeField: org.apache.thrift.protocol.TField
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin()
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break
        }
        when (schemeField.id.toInt()) {
          1 -> // P3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p3 = iprot.readString()
              struct.setP3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          2 -> // P4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p4 = iprot.readString()
              struct.setP4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
          else ->
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:B) {
      struct.validate()

      oprot.writeStructBegin(STRUCT_DESC)
      if (struct.p3 != null) {
        oprot.writeFieldBegin(P3_FIELD_DESC)
        oprot.writeString(struct.p3)
        oprot.writeFieldEnd()
      }
      if (struct.p4 != null) {
        oprot.writeFieldBegin(P4_FIELD_DESC)
        oprot.writeString(struct.p4)
        oprot.writeFieldEnd()
      }
      oprot.writeFieldStop()
      oprot.writeStructEnd()
    }

  }

  private class BTupleSchemeFactory : org.apache.thrift.scheme.SchemeFactory<BTupleScheme> {
    override fun getScheme():BTupleScheme {
      return BTupleScheme()
    }
  }

  private class BTupleScheme : org.apache.thrift.scheme.TupleScheme<B>() {

    override fun write(oprot:org.apache.thrift.protocol.TProtocol, struct:B) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = oprot as org.apache.thrift.protocol.TTupleProtocol
      val optionals:java.util.BitSet = java.util.BitSet()
      if (struct.isSetP3()) {
        optionals.set(0)
      }
      if (struct.isSetP4()) {
        optionals.set(1)
      }
      prot.writeBitSet(optionals, 2)
      if (struct.isSetP3()) {
        oprot.writeString(struct.p3)
      }
      if (struct.isSetP4()) {
        oprot.writeString(struct.p4)
      }
    }

    override fun read(iprot: org.apache.thrift.protocol.TProtocol, struct:B) {
      val prot:org.apache.thrift.protocol.TTupleProtocol = iprot as org.apache.thrift.protocol.TTupleProtocol
      val incoming:java.util.BitSet = prot.readBitSet(2)
      if (incoming.get(0)) {
        struct.p3 = iprot.readString()
        struct.setP3IsSet(true)
      }
      if (incoming.get(1)) {
        struct.p4 = iprot.readString()
        struct.setP4IsSet(true)
      }
    }
  }


  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("B");

    private val P3_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("p3", org.apache.thrift.protocol.TType.STRING, 1.toShort());
    private val P4_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("p4", org.apache.thrift.protocol.TType.STRING, 2.toShort());

    private val STANDARD_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<BStandardScheme> = BStandardSchemeFactory()
    private val TUPLE_SCHEME_FACTORY: org.apache.thrift.scheme.SchemeFactory<BTupleScheme> = BTupleSchemeFactory()
    // isset id assignments
    private val metaDataMap: Map<Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      Fields.P3 to org.apache.thrift.meta_data.FieldMetaData("p3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      Fields.P4 to org.apache.thrift.meta_data.FieldMetaData("p4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(B::class.java, metaDataMap)
    }
    private fun <S : org.apache.thrift.TBase<S, *>> scheme(proto:org.apache.thrift.protocol.TProtocol): org.apache.thrift.scheme.IScheme<S> {
      if(proto.scheme is org.apache.thrift.scheme.StandardScheme<*>) {
        return STANDARD_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
      }
      return TUPLE_SCHEME_FACTORY.getScheme() as org.apache.thrift.scheme.IScheme<S>
    }
  }
}

